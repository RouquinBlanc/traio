"""
Test nested Nurseries
"""
import asyncio
import time

import pytest

from tests import run10
from traio import Nursery


@pytest.mark.asyncio
async def test_nested_unrelated():
    """
    Two nested Nurseries, but completely unrelated.
    Remember that we cannot do magic (yet).
    As long as the inner code is blocking and
    not related to the surrounding Nursery,
    The outer timeout will be stuck!
    """
    before = time.time()

    with pytest.raises(TimeoutError):
        async with Nursery(timeout=0.2):
            async with Nursery(timeout=0.5) as inner:
                """
                A completely different
                """
                inner.start_soon(run10())

    after = time.time()
    assert (after - before) > 0.4, 'for now...'


@pytest.mark.asyncio
async def test_nested_fork_timeout_parent():
    """
    Two nested Nurseries, inner one generated by parent
    """
    before = time.time()

    with pytest.raises(TimeoutError):
        async with Nursery(timeout=0.1) as parent:
            async with parent.fork() as inner:
                inner.start_soon(run10())

    after = time.time()
    assert (after - before) < 0.2


@pytest.mark.asyncio
async def test_nested_fork_timeout_parent_no_env():
    """
    Two nested Nurseries, inner one generated by parent
    """
    before = time.time()

    with pytest.raises(TimeoutError):
        async with Nursery(timeout=0.1) as parent:
            inner = parent.fork()
            inner.start_soon(run10())
            await inner.join()

    after = time.time()
    assert (after - before) < 0.2


@pytest.mark.asyncio
async def test_nested_fork_timeout_inner():
    """
    Two nested Nurseries, but completely unrelated.
    Remember that we cannot do magic (yet).
    As long as the inner code is blocking and
    not related to the surrounding Nursery,
    The outer timeout will be stuck!
    """
    before = time.time()

    with pytest.raises(TimeoutError):
        async with Nursery() as parent:
            parent.start_soon(run10())
            async with parent.fork(timeout=0.1) as inner:
                inner.start_soon(run10())

    after = time.time()
    assert (after - before) < 0.2


@pytest.mark.asyncio
async def test_nested_fork_timeout_sibling():
    """
    Two nested Nurseries, but completely unrelated.
    Remember that we cannot do magic (yet).
    As long as the inner code is blocking and
    not related to the surrounding Nursery,
    The outer timeout will be stuck!
    """
    before = time.time()

    async def fork_my_parent(nursery, timeout: float = 0):
        async with nursery.fork(timeout=timeout) as inner:
            inner.start_soon(run10())

    with pytest.raises(TimeoutError):
        async with Nursery() as parent:
            parent.start_soon(run10())

            # First long one
            parent.start_soon(fork_my_parent(parent))

            # Second will timeout soon
            parent.start_soon(fork_my_parent(parent, timeout=0.1))

    after = time.time()
    assert (after - before) < 0.2


@pytest.mark.asyncio
async def test_nested_fork_raises_catch():
    """
    Two nested Nurseries, but completely unrelated.
    Remember that we cannot do magic (yet).
    As long as the inner code is blocking and
    not related to the surrounding Nursery,
    The outer timeout will be stuck!
    """
    before = time.time()

    async def bomb():
        await asyncio.sleep(0.2)
        raise ValueError('boom!')

    with pytest.raises(TimeoutError):
        async with Nursery(timeout=0.5) as parent:
            parent.start_soon(run10(), name='run10')

            inner = parent.fork()
            inner.start_soon(bomb())

            with pytest.raises(ValueError):
                # This should prevent bubbling
                await inner.join()

    after = time.time()
    assert (after - before) > 0.4
